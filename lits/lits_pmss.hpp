#pragma once

#include "lits_cnode.hpp"

namespace lits {

/**
 * DataSize from 2^5 to 2^27
 * GPKL from 3 to 20
 */
const int min_das = 5;
const int max_das = 27;
const int min_pkl = 3;
const int max_pkl = 20;

const int das_delt = max_das - min_das + 1;
const int pkl_delt = max_pkl - min_pkl + 1;

const int lit_syn_perf_read[das_delt][pkl_delt] = {
    {
        197,
        306,
        336,
        384,
        413,
        443,
        467,
        474,
        497,
        505,
        534,
        538,
        561,
        558,
        594,
        596,
        630,
        633,
    },
    {
        245,
        301,
        333,
        384,
        424,
        468,
        482,
        512,
        525,
        569,
        584,
        608,
        651,
        667,
        686,
        712,
        1222,
        1434,
    },
    {
        231,
        338,
        489,
        627,
        721,
        481,
        563,
        568,
        620,
        322,
        607,
        640,
        685,
        697,
        730,
        750,
        780,
        789,
    },
    {
        219,
        314,
        346,
        379,
        409,
        460,
        487,
        511,
        542,
        567,
        600,
        635,
        676,
        702,
        737,
        758,
        794,
        815,
    },
    {
        198,
        296,
        334,
        377,
        413,
        464,
        494,
        531,
        584,
        674,
        637,
        642,
        676,
        909,
        776,
        846,
        1084,
        931,
    },
    {
        250,
        328,
        366,
        346,
        378,
        442,
        485,
        500,
        560,
        610,
        655,
        670,
        700,
        731,
        772,
        887,
        833,
        856,
    },
    {
        205,
        257,
        304,
        294,
        297,
        380,
        444,
        488,
        457,
        486,
        556,
        626,
        592,
        680,
        652,
        746,
        789,
        709,
    },
    {
        158,
        229,
        236,
        220,
        247,
        285,
        303,
        342,
        345,
        403,
        392,
        439,
        410,
        493,
        511,
        495,
        514,
        535,
    },
    {
        154,
        227,
        249,
        254,
        257,
        298,
        317,
        331,
        350,
        366,
        371,
        421,
        451,
        443,
        485,
        474,
        487,
        509,
    },
    {
        137,
        212,
        232,
        237,
        238,
        274,
        300,
        316,
        358,
        349,
        371,
        417,
        407,
        423,
        452,
        484,
        472,
        482,
    },
    {
        123,
        191,
        218,
        212,
        222,
        246,
        278,
        319,
        297,
        328,
        343,
        345,
        358,
        398,
        454,
        431,
        466,
        478,
    },
    {
        123,
        169,
        205,
        198,
        202,
        227,
        235,
        270,
        280,
        291,
        330,
        309,
        340,
        402,
        376,
        356,
        407,
        379,
    },
    {
        115,
        155,
        158,
        165,
        173,
        186,
        226,
        218,
        241,
        249,
        271,
        279,
        319,
        289,
        324,
        376,
        345,
        359,
    },
    {
        107,
        134,
        136,
        143,
        156,
        166,
        173,
        186,
        201,
        219,
        236,
        268,
        250,
        260,
        271,
        283,
        289,
        303,
    },
    {
        113,
        136,
        133,
        141,
        158,
        162,
        191,
        172,
        173,
        199,
        230,
        234,
        250,
        256,
        270,
        270,
        253,
        281,
    },
    {
        102,
        113,
        116,
        161,
        169,
        179,
        185,
        182,
        226,
        180,
        200,
        210,
        212,
        261,
        258,
        248,
        277,
        349,
    },
    {
        84,
        116,
        146,
        140,
        183,
        189,
        200,
        195,
        187,
        208,
        208,
        227,
        212,
        240,
        225,
        228,
        256,
        241,
    },
    {
        84,
        110,
        144,
        150,
        193,
        214,
        226,
        234,
        227,
        214,
        233,
        223,
        224,
        221,
        211,
        240,
        251,
        263,
    },
    {
        84,
        107,
        146,
        151,
        152,
        196,
        207,
        226,
        239,
        248,
        255,
        282,
        291,
        312,
        329,
        279,
        308,
        351,
    },
    {
        84,
        108,
        131,
        92,
        118,
        171,
        123,
        145,
        206,
        188,
        159,
        176,
        209,
        190,
        324,
        232,
        290,
        265,
    },
    {
        85,
        85,
        76,
        75,
        88,
        80,
        127,
        117,
        121,
        119,
        120,
        155,
        131,
        157,
        204,
        179,
        177,
        172,
    },
    {
        80,
        85,
        102,
        83,
        91,
        95,
        104,
        107,
        100,
        139,
        127,
        129,
        125,
        148,
        149,
        171,
        192,
        189,
    },
    {
        90,
        79,
        99,
        78,
        85,
        96,
        106,
        110,
        111,
        126,
        123,
        122,
        130,
        133,
        172,
        153,
        151,
        186,
    },
};

const int hot_syn_perf_read[max_das][max_pkl] = {
    {
        211,
        217,
        219,
        233,
        247,
        253,
        255,
        252,
        257,
        256,
        261,
        259,
        264,
        260,
        266,
        265,
        274,
        279,
    },
    {
        295,
        292,
        291,
        303,
        304,
        312,
        310,
        319,
        318,
        324,
        321,
        320,
        324,
        324,
        509,
        541,
        454,
        429,
    },
    {
        516,
        435,
        532,
        464,
        464,
        317,
        321,
        325,
        325,
        324,
        324,
        327,
        337,
        326,
        332,
        329,
        338,
        341,
    },
    {
        301,
        301,
        301,
        308,
        313,
        319,
        331,
        328,
        330,
        328,
        327,
        330,
        339,
        329,
        341,
        337,
        345,
        346,
    },
    {
        331,
        322,
        323,
        328,
        334,
        343,
        412,
        510,
        442,
        628,
        509,
        545,
        541,
        516,
        541,
        523,
        526,
        531,
    },
    {
        671,
        431,
        424,
        698,
        590,
        658,
        610,
        662,
        624,
        667,
        667,
        655,
        671,
        679,
        650,
        655,
        657,
        686,
    },
    {
        437,
        425,
        647,
        440,
        627,
        497,
        721,
        732,
        618,
        629,
        734,
        713,
        662,
        727,
        719,
        727,
        728,
        704,
    },
    {
        668,
        414,
        402,
        412,
        571,
        618,
        662,
        701,
        583,
        702,
        579,
        713,
        673,
        688,
        687,
        608,
        612,
        592,
    },
    {
        444,
        434,
        420,
        423,
        589,
        537,
        685,
        672,
        730,
        688,
        675,
        717,
        712,
        688,
        708,
        671,
        677,
        722,
    },
    {
        484,
        487,
        455,
        439,
        554,
        649,
        670,
        681,
        746,
        693,
        747,
        759,
        541,
        765,
        749,
        757,
        720,
        716,
    },
    {
        517,
        508,
        487,
        470,
        643,
        720,
        682,
        796,
        754,
        666,
        721,
        736,
        747,
        705,
        770,
        686,
        785,
        774,
    },
    {
        515,
        504,
        489,
        467,
        616,
        639,
        694,
        803,
        667,
        697,
        814,
        749,
        783,
        793,
        786,
        760,
        769,
        755,
    },
    {
        503,
        496,
        477,
        455,
        637,
        675,
        760,
        700,
        725,
        675,
        670,
        752,
        667,
        732,
        742,
        771,
        719,
        736,
    },
    {
        512,
        537,
        497,
        467,
        650,
        701,
        668,
        725,
        669,
        673,
        723,
        790,
        671,
        760,
        765,
        720,
        725,
        758,
    },
    {
        529,
        527,
        494,
        486,
        556,
        657,
        743,
        628,
        750,
        714,
        789,
        753,
        750,
        742,
        758,
        740,
        846,
        750,
    },
    {
        787,
        528,
        502,
        482,
        527,
        690,
        691,
        741,
        792,
        740,
        725,
        752,
        766,
        662,
        757,
        778,
        768,
        750,
    },
    {
        825,
        527,
        512,
        486,
        600,
        701,
        687,
        757,
        753,
        695,
        692,
        737,
        752,
        762,
        741,
        744,
        745,
        769,
    },
    {
        815,
        526,
        522,
        484,
        578,
        690,
        719,
        696,
        723,
        817,
        761,
        751,
        779,
        741,
        853,
        762,
        772,
        767,
    },
    {
        828,
        539,
        525,
        497,
        636,
        735,
        726,
        764,
        776,
        832,
        759,
        732,
        699,
        787,
        770,
        752,
        761,
        778,
    },
    {
        857,
        552,
        541,
        498,
        659,
        755,
        736,
        776,
        751,
        725,
        724,
        751,
        799,
        759,
        822,
        772,
        882,
        770,
    },
    {
        867,
        819,
        547,
        529,
        610,
        768,
        666,
        807,
        749,
        783,
        754,
        734,
        698,
        808,
        723,
        742,
        779,
        763,
    },
    {
        866,
        810,
        535,
        586,
        745,
        522,
        702,
        747,
        785,
        791,
        724,
        798,
        706,
        777,
        763,
        765,
        787,
        770,
    },
    {
        559,
        576,
        552,
        449,
        391,
        744,
        505,
        590,
        779,
        748,
        754,
        766,
        741,
        750,
        822,
        758,
        858,
        769,
    },
};

const int lit_syn_perf_write[max_das][max_pkl] = {
    {
        913,
        628,
        702,
        685,
        812,
        828,
        739,
        882,
        798,
        800,
        821,
        851,
        952,
        936,
        883,
        995,
        879,
        923,
    },
    {
        851,
        678,
        650,
        674,
        739,
        878,
        797,
        862,
        804,
        1079,
        867,
        1153,
        915,
        919,
        982,
        886,
        1033,
        1023,
    },
    {
        853,
        705,
        728,
        758,
        839,
        852,
        1045,
        992,
        975,
        838,
        1252,
        965,
        1217,
        1041,
        1007,
        1002,
        1291,
        1050,
    },
    {
        853,
        612,
        719,
        875,
        914,
        969,
        1157,
        1187,
        1055,
        1041,
        1189,
        1289,
        1122,
        1196,
        1211,
        1456,
        1220,
        1248,
    },
    {
        702,
        710,
        828,
        864,
        1012,
        1187,
        1325,
        1327,
        1184,
        1603,
        1332,
        1364,
        1301,
        1351,
        1379,
        1564,
        1449,
        1447,
    },
    {
        679,
        702,
        856,
        928,
        1033,
        1205,
        1207,
        1190,
        1383,
        1582,
        1513,
        1343,
        1372,
        1381,
        1378,
        1434,
        1444,
        1673,
    },
    {
        392,
        735,
        1018,
        1063,
        1430,
        1585,
        1555,
        1194,
        1385,
        1222,
        1317,
        1395,
        1434,
        1568,
        1448,
        1453,
        1436,
        1466,
    },
    {
        680,
        517,
        595,
        706,
        895,
        991,
        1095,
        1030,
        1154,
        1166,
        1236,
        1180,
        1220,
        1256,
        1258,
        1260,
        1308,
        1279,
    },
    {
        551,
        505,
        544,
        646,
        804,
        915,
        924,
        973,
        1059,
        1096,
        1143,
        1152,
        1099,
        1192,
        1219,
        1167,
        1193,
        1208,
    },
    {
        536,
        474,
        583,
        612,
        751,
        860,
        918,
        964,
        963,
        993,
        950,
        1007,
        1022,
        1040,
        1055,
        1040,
        1236,
        1133,
    },
    {
        525,
        403,
        466,
        590,
        739,
        798,
        889,
        949,
        1040,
        971,
        936,
        1026,
        1117,
        1100,
        997,
        1094,
        1128,
        1122,
    },
    {
        466,
        393,
        499,
        575,
        705,
        792,
        840,
        888,
        931,
        925,
        979,
        1039,
        1005,
        1128,
        1077,
        1014,
        1035,
        1025,
    },
    {
        476,
        430,
        433,
        597,
        721,
        833,
        868,
        977,
        998,
        965,
        1050,
        1095,
        1110,
        1054,
        1129,
        1152,
        1186,
        1241,
    },
    {
        473,
        411,
        487,
        576,
        716,
        788,
        834,
        872,
        912,
        976,
        955,
        970,
        954,
        1062,
        1122,
        1103,
        1045,
        1190,
    },
    {
        444,
        380,
        426,
        527,
        709,
        794,
        936,
        899,
        923,
        919,
        1054,
        967,
        983,
        1084,
        1012,
        1007,
        1058,
        1171,
    },
    {
        467,
        307,
        361,
        515,
        688,
        715,
        781,
        810,
        847,
        869,
        803,
        898,
        878,
        965,
        974,
        905,
        894,
        956,
    },
    {
        444,
        278,
        346,
        498,
        663,
        736,
        783,
        804,
        815,
        861,
        787,
        762,
        920,
        879,
        852,
        905,
        894,
        936,
    },
    {
        400,
        353,
        342,
        473,
        652,
        692,
        754,
        807,
        793,
        852,
        848,
        838,
        852,
        875,
        865,
        839,
        836,
        869,
    },
    {
        300,
        326,
        346,
        498,
        664,
        742,
        798,
        873,
        1091,
        784,
        909,
        864,
        798,
        932,
        923,
        948,
        968,
        908,
    },
    {
        450,
        332,
        345,
        509,
        655,
        699,
        712,
        832,
        750,
        792,
        846,
        863,
        865,
        840,
        925,
        963,
        835,
        859,
    },
    {
        442,
        457,
        374,
        501,
        659,
        636,
        995,
        765,
        741,
        886,
        919,
        813,
        849,
        893,
        758,
        805,
        858,
        806,
    },
    {
        360,
        311,
        313,
        375,
        582,
        666,
        668,
        861,
        1167,
        621,
        895,
        649,
        632,
        909,
        638,
        703,
        757,
        717,
    },
    {
        475,
        430,
        328,
        423,
        522,
        584,
        493,
        570,
        455,
        501,
        872,
        669,
        646,
        498,
        447,
        610,
        905,
        533,
    },
};

const int hot_syn_perf_write[max_das][max_pkl] = {
    {
        1305,
        946,
        1033,
        1395,
        1339,
        1082,
        1316,
        1333,
        1234,
        1329,
        1224,
        1299,
        1344,
        1115,
        1282,
        1354,
        1456,
        1234,
    },
    {
        1140,
        752,
        756,
        760,
        943,
        1141,
        1047,
        1132,
        1140,
        1409,
        1171,
        1150,
        1153,
        1013,
        1123,
        1138,
        1133,
        1114,
    },
    {
        1112,
        762,
        767,
        775,
        880,
        942,
        1158,
        1143,
        1126,
        816,
        1142,
        1234,
        1135,
        1097,
        1090,
        1132,
        1117,
        1171,
    },
    {
        1163,
        749,
        761,
        777,
        895,
        1115,
        1118,
        1157,
        1078,
        1065,
        1106,
        1144,
        1098,
        1082,
        1123,
        1087,
        1123,
        1140,
    },
    {
        791,
        800,
        805,
        814,
        1043,
        1138,
        1210,
        1223,
        1102,
        1228,
        1155,
        1062,
        1200,
        1493,
        1099,
        1139,
        1116,
        1200,
    },
    {
        1299,
        867,
        861,
        893,
        1205,
        1194,
        1209,
        1189,
        1373,
        1210,
        1207,
        1332,
        1216,
        1299,
        1287,
        1334,
        1325,
        1291,
    },
    {
        809,
        1158,
        1169,
        913,
        1214,
        1004,
        961,
        987,
        1354,
        1131,
        1179,
        1134,
        1282,
        1324,
        1212,
        1446,
        1174,
        1246,
    },
    {
        818,
        792,
        786,
        793,
        891,
        1182,
        1033,
        1250,
        1266,
        1083,
        1073,
        1072,
        1061,
        1191,
        1080,
        1108,
        1082,
        1300,
    },
    {
        1138,
        792,
        784,
        776,
        955,
        1328,
        974,
        1085,
        1037,
        1073,
        1034,
        1211,
        1154,
        1080,
        1044,
        1253,
        1085,
        1093,
    },
    {
        1204,
        855,
        835,
        822,
        914,
        922,
        1139,
        1244,
        888,
        1058,
        1127,
        1142,
        1174,
        1180,
        1087,
        1175,
        1212,
        1154,
    },
    {
        1393,
        844,
        829,
        819,
        991,
        953,
        1088,
        1049,
        1354,
        1072,
        1092,
        1125,
        1285,
        1038,
        1131,
        1036,
        960,
        968,
    },
    {
        850,
        827,
        820,
        812,
        1025,
        1048,
        1202,
        977,
        1155,
        1032,
        1187,
        928,
        1107,
        1229,
        962,
        1167,
        1221,
        1165,
    },
    {
        811,
        802,
        790,
        787,
        957,
        929,
        1175,
        1203,
        1024,
        1047,
        1047,
        1141,
        1050,
        1050,
        1044,
        1114,
        1218,
        1127,
    },
    {
        1130,
        831,
        804,
        786,
        1048,
        1067,
        921,
        1036,
        1040,
        1130,
        1005,
        1111,
        1180,
        1028,
        1146,
        1209,
        1151,
        1220,
    },
    {
        774,
        776,
        761,
        755,
        835,
        882,
        1157,
        1012,
        980,
        926,
        1318,
        1055,
        1069,
        989,
        994,
        1024,
        1017,
        1157,
    },
    {
        1208,
        765,
        749,
        745,
        808,
        869,
        1069,
        904,
        946,
        935,
        1063,
        848,
        996,
        961,
        987,
        1098,
        980,
        963,
    },
    {
        1103,
        751,
        742,
        740,
        1051,
        949,
        968,
        1121,
        1007,
        906,
        1056,
        986,
        1117,
        1065,
        987,
        986,
        968,
        1083,
    },
    {
        754,
        749,
        737,
        727,
        790,
        971,
        1087,
        992,
        1054,
        855,
        840,
        1091,
        896,
        971,
        1138,
        1049,
        968,
        970,
    },
    {
        766,
        768,
        748,
        741,
        812,
        899,
        959,
        963,
        973,
        961,
        843,
        1089,
        1089,
        990,
        966,
        911,
        877,
        981,
    },
    {
        1112,
        774,
        758,
        726,
        778,
        964,
        965,
        934,
        923,
        974,
        849,
        957,
        970,
        988,
        933,
        965,
        1010,
        950,
    },
    {
        1155,
        1106,
        776,
        757,
        928,
        929,
        1020,
        966,
        832,
        867,
        880,
        943,
        971,
        962,
        958,
        967,
        1103,
        995,
    },
    {
        782,
        788,
        772,
        876,
        916,
        824,
        915,
        1028,
        1036,
        796,
        921,
        940,
        918,
        1025,
        998,
        1011,
        969,
        977,
    },
    {
        1081,
        836,
        764,
        728,
        895,
        781,
        851,
        838,
        1166,
        999,
        939,
        805,
        919,
        1027,
        1012,
        944,
        986,
        1014,
    },
};

typedef enum : uint8_t {

    // This sub-trie is multi-item-array.
    STYP_Items = 0,
    // This sub-trie is HOT.
    STYP_Trie = 1,
    // This sub-trie is Compact node.
    STYP_Cnode = 2,

} SubTrieType;

class PMSS {
  public:
    double read_ratio;
    double write_ratio;

    PMSS(double _read_ratio = 1, double _write_ratio = 0)
        : read_ratio(_read_ratio), write_ratio(_write_ratio) {}

    /**
     * @brief Structural Decision Tree. This function is used to decide the
     * struture of sub-trie during bulk load.
     *
     * @param data_size The input data size.
     * @param pkl The partial key length.
     * @param lookup_ratio The lookup ratio.
     * @param insert_ratio The insert ratio.
     *
     * @return the sub-trie's struture type.
     */
    SubTrieType decideSubType(int data_size, double _pkl) const {
        // Cnode is preferred when the data size is small
        if (data_size <= CNODE_SIZE) {
            return STYP_Cnode;
        }

        double das = std::max<double>(
            min_das, std::min<double>(log2(data_size), max_das));
        double pkl = std::max<double>(min_pkl, std::min<double>(_pkl, max_pkl));

        das -= min_das;
        pkl -= min_pkl;

        int das_lower_bound = int(das);
        int das_upper_bound = int(das) + 1;
        double das_lower_bound_ratio = das - das_lower_bound;
        int pkl_lower_bound = int(pkl);
        int pkl_upper_bound = int(pkl) + 1;
        double pkl_lower_bound_ratio = pkl - pkl_lower_bound;

        RT_ASSERT(das_lower_bound_ratio >= 0 && das_lower_bound_ratio <= 1);
        RT_ASSERT(pkl_lower_bound_ratio >= 0 && pkl_lower_bound_ratio <= 1);

        double syn_lit_r =
            lit_syn_perf_read[das_lower_bound][pkl_lower_bound] *
                (1 - das_lower_bound_ratio) * (1 - pkl_lower_bound_ratio) +
            lit_syn_perf_read[das_lower_bound][pkl_upper_bound] *
                (1 - das_lower_bound_ratio) * (pkl_lower_bound_ratio) +
            lit_syn_perf_read[das_upper_bound][pkl_lower_bound] *
                (das_lower_bound_ratio) * (1 - pkl_lower_bound_ratio) +
            lit_syn_perf_read[das_upper_bound][pkl_upper_bound] *
                (das_lower_bound_ratio) * (pkl_lower_bound_ratio);

        double syn_lit_w =
            lit_syn_perf_write[das_lower_bound][pkl_lower_bound] *
                (1 - das_lower_bound_ratio) * (1 - pkl_lower_bound_ratio) +
            lit_syn_perf_write[das_lower_bound][pkl_upper_bound] *
                (1 - das_lower_bound_ratio) * (pkl_lower_bound_ratio) +
            lit_syn_perf_write[das_upper_bound][pkl_lower_bound] *
                (das_lower_bound_ratio) * (1 - pkl_lower_bound_ratio) +
            lit_syn_perf_write[das_upper_bound][pkl_upper_bound] *
                (das_lower_bound_ratio) * (pkl_lower_bound_ratio);

        double syn_hot_r =
            hot_syn_perf_read[das_lower_bound][pkl_lower_bound] *
                (1 - das_lower_bound_ratio) * (1 - pkl_lower_bound_ratio) +
            hot_syn_perf_read[das_lower_bound][pkl_upper_bound] *
                (1 - das_lower_bound_ratio) * (pkl_lower_bound_ratio) +
            hot_syn_perf_read[das_upper_bound][pkl_lower_bound] *
                (das_lower_bound_ratio) * (1 - pkl_lower_bound_ratio) +
            hot_syn_perf_read[das_upper_bound][pkl_upper_bound] *
                (das_lower_bound_ratio) * (pkl_lower_bound_ratio);

        double syn_hot_w =
            hot_syn_perf_write[das_lower_bound][pkl_lower_bound] *
                (1 - das_lower_bound_ratio) * (1 - pkl_lower_bound_ratio) +
            hot_syn_perf_write[das_lower_bound][pkl_upper_bound] *
                (1 - das_lower_bound_ratio) * (pkl_lower_bound_ratio) +
            hot_syn_perf_write[das_upper_bound][pkl_lower_bound] *
                (das_lower_bound_ratio) * (1 - pkl_lower_bound_ratio) +
            hot_syn_perf_write[das_upper_bound][pkl_upper_bound] *
                (das_lower_bound_ratio) * (pkl_lower_bound_ratio);

        double lit_syn_perf =
            read_ratio * syn_lit_r + (1 - read_ratio) * syn_lit_w;

        double hot_syn_perf =
            read_ratio * syn_hot_r + (1 - read_ratio) * syn_hot_w;

        if (lit_syn_perf < hot_syn_perf) {
            return STYP_Items;
        }
        return STYP_Trie;
    }
};

} // namespace lits